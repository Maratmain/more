# –ü—É–±–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞
import os
import json
import requests
from pathlib import Path
from typing import Dict, List, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

MAIN_API_URL = os.getenv("MAIN_API_URL", "http://api:8001")
CONFERENCES_FILE = Path(__file__).parent / "data" / "conferences.json"

def is_admin(user_id: int) -> bool:
    admins = os.getenv("TELEGRAM_ADMINS", "").split(",")
    admins = [int(admin.strip()) for admin in admins if admin.strip().isdigit()]
    return user_id in admins

def load_conferences() -> Dict[str, Any]:
    """Load conferences from JSON file"""
    try:
        with open(CONFERENCES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading conferences: {e}")
        return {}

def save_conferences(conferences: Dict[str, Any]) -> bool:
    """Save conferences to JSON file"""
    try:
        with open(CONFERENCES_FILE, 'w', encoding='utf-8') as f:
            json.dump(conferences, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Error saving conferences: {e}")
        return False

async def conferences_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /conferences command - show conference categories"""
    # Show typing indicator
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    
    conferences = load_conferences()
    
    if not conferences:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    keyboard = []
    fallback_text = "üé™ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:*\n\n"
    
    for category, data in conferences.items():
        title = data.get("title", category)
        keyboard.append([InlineKeyboardButton(
            title, 
            callback_data=f"conf_{category}"
        )])
        fallback_text += f"‚Ä¢ {title}\n"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Add fallback text for clients without buttons
    fallback_text += "\nüí° *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:* –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é"
    
    await update.message.reply_text(
        fallback_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def conf_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /conf_add command - add conference (admin only)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /conf_add <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <url> [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
            "–ü—Ä–∏–º–µ—Ä: /conf_add Data/AI https://example.com AI Conference"
        )
        return
    
    category = context.args[0]
    url = context.args[1]
    name = context.args[2] if len(context.args) > 2 else "–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
    
    # Validate URL
    if not url.startswith(('http://', 'https://')):
        await update.message.reply_text("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        return
    
    # Load current conferences
    conferences = load_conferences()
    
    # Add conference to category
    if category not in conferences:
        conferences[category] = {
            "title": f"üìã {category}",
            "description": f"–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ {category}",
            "links": []
        }
    
    # Add new conference
    new_conference = {
        "name": name,
        "url": url,
        "description": f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}"
    }
    
    conferences[category]["links"].append(new_conference)
    
    # Save conferences
    if save_conferences(conferences):
        await update.message.reply_text(
            f"‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üîó –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üåê URL: {url}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏")

async def conf_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /conf_list command - list all conferences (admin only)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    conferences = load_conferences()
    
    if not conferences:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –ø—É—Å—Ç")
        return
    
    message = "üìã *–í—Å–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:*\n\n"
    
    for category, data in conferences.items():
        message += f"**{data.get('title', category)}**\n"
        message += f"{data.get('description', '')}\n"
        
        links = data.get('links', [])
        for i, link in enumerate(links[:3], 1):  # Show first 3
            message += f"{i}. [{link.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}]({link.get('url', '#')})\n"
        
        if len(links) > 3:
            message += f"... –∏ –µ—â–µ {len(links) - 3} –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n"
        
        message += "\n"
    
    await update.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

async def handle_conference_callback(query, data: str) -> None:
    """Handle conference category selection"""
    category = data.replace("conf_", "")
    conferences = load_conferences()
    
    if category not in conferences:
        await query.edit_message_text(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    category_data = conferences[category]
    links = category_data.get("links", [])
    
    if not links:
        await query.edit_message_text(f"üìã –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π")
        return
    
    # Create message with conference links
    message = f"{category_data.get('title', category)}\n\n"
    message += f"{category_data.get('description', '')}\n\n"
    
    # Add conference links
    for i, link in enumerate(links, 1):
        message += f"{i}. [{link.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}]({link.get('url', '#')})\n"
        if link.get('description'):
            message += f"   _{link['description']}_\n"
        message += "\n"
    
    # Create keyboard with URL buttons for first few conferences
    keyboard = []
    for i, link in enumerate(links[:5], 1):  # Show buttons for first 5
        keyboard.append([InlineKeyboardButton(
            f"üîó {link.get('name', f'–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è {i}')}",
            url=link.get('url', '#')
        )])
    
    # Add back button
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="conf_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

async def handle_conf_back(query) -> None:
    """Handle back to conference categories"""
    conferences = load_conferences()
    
    keyboard = []
    for category, data in conferences.items():
        keyboard.append([InlineKeyboardButton(
            data.get("title", category), 
            callback_data=f"conf_{category}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé™ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:*",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /help command"""
    user_id = update.effective_user.id
    is_admin_user = is_admin(user_id)
    
    # Show typing indicator
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    
    help_text = """
ü§ñ *AI-HR Bot - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/upload_cv - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ
/conferences - –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤

*–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOCX, DOC, TXT)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:*
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Bot API: –¥–æ 20MB
‚Ä¢ Local Bot API: –¥–æ 2GB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT

*–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:*
‚Ä¢ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
‚Ä¢ MTProto-–±–æ—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤ >20MB
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AI-HR
"""
    
    if is_admin_user:
        help_text += """
*–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:*
/admin - –ê–¥–º–∏–Ω –º–µ–Ω—é
/candidate <id> - –ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
/links <id> - Deep links –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
/conf_add <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <url> [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
/conf_list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
/broadcast <—Å–µ–≥–º–µ–Ω—Ç> - –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
/broadcast_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
/add_user <user_id> <—Å–µ–≥–º–µ–Ω—Ç> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

*–°–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*
‚Ä¢ all - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ ba - –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ it - IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
‚Ä¢ dev - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""
    
    # Add fallback text for clients without buttons
    help_text += """
*–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø:*
–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /upload_cv - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ
‚Ä¢ /conferences - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
"""
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /status command"""
    # Show typing indicator
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    
    status_text = "üîç *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ AI-HR:*\n\n"
    
    # Check main API
    try:
        response = requests.get(f"{MAIN_API_URL}/health", timeout=5)
        if response.status_code == 200:
            status_text += "‚úÖ Main API: –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_text += "‚ö†Ô∏è Main API: –ü—Ä–æ–±–ª–µ–º—ã\n"
    except:
        status_text += "‚ùå Main API: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    # Check CV service
    try:
        cv_url = os.getenv("CV_SERVICE_URL", "http://cv:8007")
        response = requests.get(f"{cv_url}/health", timeout=5)
        if response.status_code == 200:
            status_text += "‚úÖ CV Service: –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_text += "‚ö†Ô∏è CV Service: –ü—Ä–æ–±–ª–µ–º—ã\n"
    except:
        status_text += "‚ùå CV Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    # Check Report service
    try:
        report_url = os.getenv("REPORT_API_URL", "http://report:8005")
        response = requests.get(f"{report_url}/health", timeout=5)
        if response.status_code == 200:
            status_text += "‚úÖ Report Service: –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_text += "‚ö†Ô∏è Report Service: –ü—Ä–æ–±–ª–µ–º—ã\n"
    except:
        status_text += "‚ùå Report Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    # Bot configuration
    status_text += f"\nüìã *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:*\n"
    status_text += f"‚Ä¢ Local Bot API: {'–í–∫–ª—é—á–µ–Ω' if os.getenv('TELEGRAM_USE_LOCAL_BOT_API', 'false').lower() == 'true' else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
    status_text += f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(os.getenv('TELEGRAM_ADMINS', '').split(',')) if os.getenv('TELEGRAM_ADMINS') else 0}\n"
    
    await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
